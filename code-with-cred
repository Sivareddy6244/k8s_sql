import os
import subprocess
from google.cloud import storage
from google.oauth2.credentials import Credentials

PROJECT_ID = os.getenv('PROJECT_ID')
BUCKET_NAME = os.getenv('BUCKET_NAME')

def read_token_from_env_file(env_file):
    """Read the token from the specified environment file."""
    with open(env_file, 'r') as file:
        lines = file.readlines()

    for line in lines:
        if 'GOOGLE_OAUTH_ACCESS_TOKEN' in line:
            return line.split('=')[1].strip().replace('"', '')
    
    return None

class StorageClient:
    def __init__(self, project_id):
        token = read_token_from_env_file('gcp.env')
        if token is None:
            raise ValueError("Access token not found in the environment file.")

        credentials = Credentials(token)
        self._client = storage.Client(project=project_id, credentials=credentials)

    # You might want to add additional methods to interact with Google Cloud Storage

def run_pytest():
    """Run pytest with coverage reporting."""
    try:
        subprocess.run(
            ['pytest', '--cov=package', 'code/dataform.py', '--cov-report', 'html'],
            check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while running pytest: {e}")

if __name__ == "__main__":
    storage_client = StorageClient(PROJECT_ID)
    # Add your logic to interact with the storage client here
    
    # Run tests and generate coverage report
    run_pytest()
